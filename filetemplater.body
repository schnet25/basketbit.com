<h2>File Templater</h2>
<p>
File templater is really a website templater. I probably should have just called it <i>Website Templater</i> or something to that efect; however, I didn't call it this because there is nothing that restricts the application to being used exclusively on html file.
My motivation to create it was a lack of free, non-graphical, open source website templaters. I wanted to create something simple that would allow me to interweave static and dynamic blocks of code. The static pieces would be things like navigation bars, page headers and footers. The dynamic pieces are things like page titles and content.
</p>
<p>
It was used to create this website. It is written in c++ and it is licensed under the GPL. It depends on boost and jsoncpp. The source code is available from our github page. The source tree has build and install scripts as well as dependency installers. Please feel free to check it out:
</p>
<p>
<code>git clone https://github.com/schnet25/file-templater.git</code>
</p>
<p>
The configuration files are JSON based. Here is an example:
</p>
<p>
<code>
 {
     "website" : "http://www.basketbit.com",
     "dynamicFiles" : ["index","owlhours","filetemplater"],
     "fileOrder" : ["header1.txt", "header2.txt", "*.body", "footer.txt"],
     "additionalFiles" : ["layout.css", "images"],
     "fileExtension" : "html",
     "inputDirectory" : "",
     "outputDirectory" : "/opt/www/basketbit",
     "strict" : false,
     "verbose" : false
 }
</code>
</p>
<p>
You can see that some of the configuration fields are self explanatory, some are not. Here is a description of the above configuration:
</p>
<p>
<li><b>website</b> <i>not required</i> - Target website name</li>
<li><b>dynamicFiles</b> <i>required</i> - A list of the files that will be created</li>
<li><b>fileOrder</b> <i>required</i> - An ordered list of input files. Entries that begin with the wildcard '*' field are dynamic files. The wildcard will be replaced with all the entries in the <i>dynamicFiles</i> list</li>
<li><b>additionalFiles</b> <i>not required</i> - Additional files that are to be copied directly to <i>outputDirectory</i>. Note: directories will be copied recursively</li>
<li><b>fileExtension</b> <i>required</i> - File extension for output files</li>
<li><b>inputDirectory</b> <i>not required</i> - Location of input files. If omitted the current working directory will be used</li>
<li><b>outputDirectory</b> <i>not required</i> - Destination of output files. If omitted the current working directory will be used</li>
<li><b>strict</b> <i>not required</i> - Boolean that sets where or not all <i>dynamicFiles</i> need to exist. In this example, the program would exit if strict was set to <i>true</i> and 'owlhours.body' didn't exist; however, if strict was set to <i>false</i> and 'owlhours.body' didn't exist it would simply move onto the next file</li>
<li><b>verbose</b> <i>not required</i> - Boolean to enable verbose output</li>
</p>
